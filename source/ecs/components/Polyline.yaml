
BezierCurve:
  # Basically a list of AABB-entities that act as points for a bezier curve.
  # Entity mush have the DrawPolyline component in order to actually draw the curve to the screen!

  points: std::vector<entt::entity>
  resolution: [int, 8]

Polyline:
  points: std::list<vec2>

  _methods:
    - static float heightAtX(int x, const vec2 &p0, const vec2 &p1)
      {
          vec2 delta = p1 - p0;
          if (delta.x == 0)
              return max(p0.y, p1.y);
          return p0.y + delta.y * ((static_cast<float>(x) - p0.x) / delta.x);
      }

    - float heightAtX(int x, const vec2 &offset)
      {
          static int i = 0;
          return heightAtX(x, offset, i);
      }

    - float heightAtX(int x, const vec2 &offset, int &pointIndex)
      {
          auto it = points.begin();

          for (pointIndex = 0; pointIndex < points.size() - 1; pointIndex++)
          {
              const vec2 p0 = *it + offset;
              const vec2 p1 = *(++it) + offset;

              if (p0.x <= x && p1.x >= x)
                  return heightAtX(x, p0, p1);
          }
          return -1;
      }

PolylineFromEntities:
  pointEntities: std::list<entt::entity>
